import streamlit as st
from pydrive2.auth import GoogleAuth
from pydrive2.drive import GoogleDrive
import json
import os
import datetime
from PIL import Image
import io

# Load secrets
creds = json.loads(st.secrets["google"]["CREDENTIALS"])
token = json.loads(st.secrets["google"]["TOKEN"])

# Write credentials to file
with open("credentials.json", "w") as f:
    json.dump(creds, f)
with open("token.json", "w") as f:
    json.dump(token, f)

# Authenticate with PyDrive2
gauth = GoogleAuth()
gauth.LoadCredentialsFile("token.json")
if not gauth.credentials or gauth.credentials.invalid:
    gauth.LoadClientConfigFile("credentials.json")
    gauth.Authorize()
    gauth.SaveCredentialsFile("token.json")

drive = GoogleDrive(gauth)

# Function to find or create the apple_dataset folder
@st.cache_data
def get_or_create_dataset_folder():
    """Find or create the apple_dataset folder in Google Drive"""
    try:
        # Search for existing folder
        folder_list = drive.ListFile({'q': "title='apple_dataset' and mimeType='application/vnd.google-apps.folder' and trashed=false"}).GetList()
        
        if folder_list:
            return folder_list[0]['id']
        else:
            # Create new folder
            folder = drive.CreateFile({
                'title': 'apple_dataset',
                'mimeType': 'application/vnd.google-apps.folder'
            })
            folder.Upload()
            return folder['id']
    except Exception as e:
        st.error(f"Error creating/finding folder: {str(e)}")
        return None

# Function to upload image to Google Drive
def upload_image_to_drive(image_file, metadata):
    """Upload image and metadata to Google Drive"""
    try:
        folder_id = get_or_create_dataset_folder()
        if not folder_id:
            return False, "Could not create/find apple_dataset folder"
        
        # Generate unique filename
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"apple_{timestamp}.jpg"
        
        # Convert image to bytes
        image = Image.open(image_file)
        # Convert to RGB if needed
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # Save image to bytes
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format='JPEG', quality=95)
        img_byte_arr.seek(0)
        
        # Upload image file
        image_drive_file = drive.CreateFile({
            'title': filename,
            'parents': [{'id': folder_id}]
        })
        image_drive_file.content = img_byte_arr
        image_drive_file.Upload()
        
        # Create metadata JSON file
        metadata_filename = f"apple_{timestamp}_metadata.json"
        metadata_drive_file = drive.CreateFile({
            'title': metadata_filename,
            'parents': [{'id': folder_id}]
        })
        metadata_drive_file.SetContentString(json.dumps(metadata, indent=2))
        metadata_drive_file.Upload()
        
        return True, f"Successfully uploaded {filename} and {metadata_filename}"
        
    except Exception as e:
        return False, f"Upload failed: {str(e)}"

# Initialize session state for progress tracking
if 'total_uploads' not in st.session_state:
    st.session_state.total_uploads = 0
if 'current_image' not in st.session_state:
    st.session_state.current_image = None
if 'upload_status' not in st.session_state:
    st.session_state.upload_status = None

# App UI
st.set_page_config(
    page_title="Apple AI Dataset Collection", 
    page_icon="üçé",
    layout="wide"
)

# Header with animated elements
st.markdown("""
<div style="background: linear-gradient(90deg, #FF6B6B, #4ECDC4); padding: 20px; border-radius: 10px; margin-bottom: 20px;">
    <h1 style="color: white; text-align: center; margin: 0;">üçé Apple Smart Assessment Project</h1>
    <p style="color: white; text-align: center; margin: 5px 0;">‡§∏‡•á‡§¨ ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§™‡§∞‡§ø‡§Ø‡•ã‡§ú‡§®‡§æ</p>
</div>
""", unsafe_allow_html=True)

# Progress display
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Total Contributions", f"{st.session_state.total_uploads} üì∏")
with col2:
    st.metric("Project Partner", "IARI Delhi üèõÔ∏è")
with col3:
    st.metric("Goal", "10,000 Images üéØ")

# Welcome message
st.markdown("""
### ü§ù Welcome Farmer Friends! / ‡§ï‡§ø‡§∏‡§æ‡§® ‡§Æ‡§ø‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!

**üéØ Our Mission / ‡§π‡§Æ‡§æ‡§∞‡§æ ‡§â‡§¶‡•ç‡§¶‡•á‡§∂‡•ç‡§Ø:**
- Build AI to assess apple **color percentage** / ‡§∞‡§Ç‡§ó ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ ‡§ï‡§æ ‡§Ü‡§ï‡§≤‡§®
- Determine **ripeness levels** / ‡§™‡§ï‡§®‡•á ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§®‡§ø‡§∞‡•ç‡§ß‡§æ‡§∞‡§ø‡§§ ‡§ï‡§∞‡§®‡§æ  
- Detect **damage and defects** / ‡§®‡•Å‡§ï‡§∏‡§æ‡§® ‡§î‡§∞ ‡§¶‡•ã‡§∑ ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§®

**üí° You can upload as many images as you want to help us build better AI models!**
**‡§Ü‡§™ ‡§ú‡§ø‡§§‡§®‡•Ä ‡§ö‡§æ‡§π‡•á‡§Ç ‡§â‡§§‡§®‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞‡•á‡§Ç ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!**
""")

st.markdown("---")

# Image upload section
st.subheader("üì∏ Step 1: Upload Apple Image / ‡§ö‡§∞‡§£ 1: ‡§∏‡•á‡§¨ ‡§ï‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç")

# Image source selection
option = st.radio(
    "Choose image source / ‡§õ‡§µ‡§ø ‡§∏‡•ç‡§∞‡•ã‡§§ ‡§ö‡•Å‡§®‡•á‡§Ç",
    ["üìÅ Upload from device / ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§∏‡•á ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç", "üì∏ Use camera / ‡§ï‡•à‡§Æ‡§∞‡§æ ‡§∏‡•á ‡§≤‡•á‡§Ç"]
)

uploaded_file = None
if option == "üìÅ Upload from device / ‡§°‡§ø‡§µ‡§æ‡§á‡§∏ ‡§∏‡•á ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç":
    uploaded_file = st.file_uploader(
        "Upload apple image / ‡§∏‡•á‡§¨ ‡§ï‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç", 
        type=["jpg", "jpeg", "png"],
        help="Best quality images help us build better AI models!"
    )
elif option == "üì∏ Use camera / ‡§ï‡•à‡§Æ‡§∞‡§æ ‡§∏‡•á ‡§≤‡•á‡§Ç":
    uploaded_file = st.camera_input(
        "Take a picture / ‡§è‡§ï ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§≤‡•á‡§Ç",
        help="Hold camera steady and ensure good lighting"
    )

# Store current image in session state
if uploaded_file is not None:
    st.session_state.current_image = uploaded_file

# Show image preview and assessment form only if image is uploaded
if st.session_state.current_image is not None:
    # Preview uploaded image
    st.subheader("üñºÔ∏è Image Preview / ‡§õ‡§µ‡§ø ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§µ‡§≤‡•ã‡§ï‡§®")
    
    # Display image with analysis
    image = Image.open(st.session_state.current_image)
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.image(image, caption="Uploaded Apple Image", use_column_width=True)
    
    with col2:
        st.success("‚úÖ Image Quality: Good")
        st.info(f"üìè Size: {image.size[0]}x{image.size[1]} pixels")
        st.info(f"üíæ File Size: {len(st.session_state.current_image.getvalue())/1024:.1f} KB")
        
        # Quality tips
        st.markdown("**üì∏ Photography Tips:**")
        st.markdown("- Good lighting ‚ú®")
        st.markdown("- Clear focus üéØ")
        st.markdown("- Full apple visible üçé")
        st.markdown("- Neutral background ü§ç")
    
    st.markdown("---")
    
    # Assessment form
    st.subheader("üîç Step 2: Apple Assessment / ‡§ö‡§∞‡§£ 2: ‡§∏‡•á‡§¨ ‡§ï‡§æ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§®")
    
    with st.form("assessment_form"):
        # Color assessment
        st.write("**üé® Color Distribution / ‡§∞‡§Ç‡§ó ‡§µ‡§ø‡§§‡§∞‡§£:**")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            red_percentage = st.slider("Red Color % / ‡§≤‡§æ‡§≤ ‡§∞‡§Ç‡§ó %", 0, 100, 50)
        with col2:
            green_percentage = st.slider("Green Color % / ‡§π‡§∞‡§æ ‡§∞‡§Ç‡§ó %", 0, 100, 30)
        with col3:
            yellow_percentage = st.slider("Yellow Color % / ‡§™‡•Ä‡§≤‡§æ ‡§∞‡§Ç‡§ó %", 0, 100, 20)
        
        # Show color distribution visually
        total_percentage = red_percentage + green_percentage + yellow_percentage
        if total_percentage > 100:
            st.warning("‚ö†Ô∏è Total percentage should not exceed 100% / ‡§ï‡•Å‡§≤ ‡§™‡•ç‡§∞‡§§‡§ø‡§∂‡§§ 100% ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è")
        else:
            st.success(f"‚úÖ Total: {total_percentage}% (Remaining: {100-total_percentage}%)")
        
        st.markdown("---")
        
        # Ripeness assessment
        st.write("**üçé Ripeness Level / ‡§™‡§ï‡§®‡•á ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø:**")
        ripeness = st.selectbox("Select ripeness level / ‡§™‡§ï‡§®‡•á ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ö‡•Å‡§®‡•á‡§Ç",
                               ["Unripe / ‡§ï‡§ö‡•ç‡§ö‡§æ (Hard, very green)",
                                "Semi-ripe / ‡§Ö‡§ß‡§™‡§ï‡§æ (Firm, mixed colors)",
                                "Ripe / ‡§™‡§ï‡§æ ‡§π‡•Å‡§Ü (Sweet, good colors)",
                                "Over-ripe / ‡§Ö‡§ß‡§ø‡§ï ‡§™‡§ï‡§æ (Soft, dull colors)"])
        
        st.markdown("---")
        
        # Damage assessment
        st.write("**üîç Damage Assessment / ‡§®‡•Å‡§ï‡§∏‡§æ‡§® ‡§ï‡§æ ‡§Ü‡§ï‡§≤‡§®:**")
        
        col1, col2 = st.columns(2)
        with col1:
            surface_damage = st.multiselect("Surface Damage / ‡§∏‡§§‡§π ‡§ï‡•Ä ‡§ï‡•ç‡§∑‡§§‡§ø",
                                           ["Scratches / ‡§ñ‡§∞‡•ã‡§Ç‡§ö‡•á‡§Ç",
                                            "Bruises / ‡§ö‡•ã‡§ü ‡§ï‡•á ‡§®‡§ø‡§∂‡§æ‡§®",
                                            "Cuts / ‡§ï‡§ü‡§æ‡§µ",
                                            "Insect damage / ‡§ï‡•Ä‡§°‡§º‡•á ‡§ï‡§æ ‡§®‡•Å‡§ï‡§∏‡§æ‡§®",
                                            "Disease spots / ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§ß‡§¨‡•ç‡§¨‡•á",
                                            "Sunburn / ‡§ß‡•Ç‡§™ ‡§ï‡•Ä ‡§ú‡§≤‡§®",
                                            "None / ‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç"])
        
        with col2:
            damage_severity = st.selectbox("Damage Severity / ‡§®‡•Å‡§ï‡§∏‡§æ‡§® ‡§ï‡•Ä ‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ",
                                          ["None / ‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç",
                                           "Minor / ‡§Æ‡§æ‡§Æ‡•Ç‡§≤‡•Ä",
                                           "Moderate / ‡§Æ‡§ß‡•ç‡§Ø‡§Æ",
                                           "Severe / ‡§ó‡§Ç‡§≠‡•Ä‡§∞"])
        
        # Submit button
        submitted = st.form_submit_button("üöÄ Submit Assessment / ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç", 
                                         use_container_width=True)
        
        if submitted:
            # Show uploading progress
            with st.spinner("Uploading to Google Drive... / ‡§ó‡•Ç‡§ó‡§≤ ‡§°‡•ç‡§∞‡§æ‡§á‡§µ ‡§Æ‡•á‡§Ç ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à..."):
                # Create metadata
                metadata = {
                    "red_percentage": red_percentage,
                    "green_percentage": green_percentage,
                    "yellow_percentage": yellow_percentage,
                    "total_color_percentage": total_percentage,
                    "ripeness": ripeness,
                    "surface_damage": surface_damage,
                    "damage_severity": damage_severity,
                    "upload_timestamp": datetime.datetime.now().isoformat(),
                    "image_size": f"{image.size[0]}x{image.size[1]}",
                    "file_size_kb": len(st.session_state.current_image.getvalue())/1024
                }
                
                # Upload to Google Drive
                success, message = upload_image_to_drive(st.session_state.current_image, metadata)
                
                if success:
                    # Success message with animation
                    st.balloons()
                    st.success(f"üéâ Successfully uploaded to Google Drive! / ‡§ó‡•Ç‡§ó‡§≤ ‡§°‡•ç‡§∞‡§æ‡§á‡§µ ‡§Æ‡•á‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§Ø‡§æ!")
                    st.info(f"üìÅ {message}")
                    
                    # Update progress
                    st.session_state.total_uploads += 1
                    
                    # Show contribution summary
                    st.markdown("### üìä Your Contribution Summary / ‡§Ü‡§™‡§ï‡§æ ‡§Ø‡•ã‡§ó‡§¶‡§æ‡§® ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.info(f"**Color Distribution:** {red_percentage}% Red, {green_percentage}% Green, {yellow_percentage}% Yellow")
                        st.info(f"**Ripeness:** {ripeness}")
                    with col2:
                        st.info(f"**Damage Type:** {', '.join(surface_damage) if surface_damage else 'None'}")
                        st.info(f"**Damage Severity:** {damage_severity}")
                    
                    # Clear current image to allow new upload
                    st.session_state.current_image = None
                    
                    # Encouragement message
                    st.markdown("---")
                    st.markdown("### üåü Upload More Images! / ‡§î‡§∞ ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞‡•á‡§Ç ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç!")
                    st.markdown("""
                    **üîÑ You can upload as many images as you want!**
                    **‡§Ü‡§™ ‡§ú‡§ø‡§§‡§®‡•Ä ‡§ö‡§æ‡§π‡•á‡§Ç ‡§â‡§§‡§®‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞‡•á‡§Ç ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!**
                    
                    **Your images help us:**
                    - Train better AI models ü§ñ
                    - Help farmers get fair prices üí∞
                    - Reduce food waste üå±
                    - Build technology for rural India üáÆüá≥
                    """)
                    
                    # Auto-refresh after successful upload
                    st.rerun()
                    
                else:
                    st.error(f"‚ùå Upload failed: {message}")
                    st.error("Please try again or contact support.")

# Reset button to upload another image (outside the form)
if st.session_state.total_uploads > 0:
    if st.button("üì∏ Upload Another Image / ‡§è‡§ï ‡§î‡§∞ ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç", use_container_width=True):
        st.session_state.current_image = None
        st.rerun()

else:
    st.info("üëÜ Please upload or take a picture of an apple to continue / ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§ó‡•á ‡§¨‡§¢‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•á‡§¨ ‡§ï‡•Ä ‡§§‡§∏‡•ç‡§µ‡•Ä‡§∞ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§Ø‡§æ ‡§≤‡•á‡§Ç")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; padding: 20px; background-color: #f0f0f0; border-radius: 10px;">
    <h4>ü§ù Project Partnership</h4>
    <p><strong>IARI Delhi</strong> | Indian Agricultural Research Institute</p>
    <p>üìû Contact: 7876471141 | üìß Email: unisole.empower@gmail.com</p>
    <p><em>Building AI for Agriculture ‚Ä¢ ‡§ï‡•É‡§∑‡§ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§Ü‡§à ‡§ï‡§æ ‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£</em></p>
</div>
""", unsafe_allow_html=True)

# Tips sidebar
with st.sidebar:
    st.header("üí° Tips for Better Images")
    st.markdown("""
    **üì∏ Photography Guidelines:**
    - Use natural daylight
    - Clean the apple surface
    - Show the entire apple
    - Include a coin for size reference
    - Take multiple angles if possible
    
    **üéØ What We're Looking For:**
    - Color variations
    - Ripeness stages
    - Surface defects
    - Different varieties
    - Various storage conditions
    """)
    
    st.header("üìà Project Progress")
    st.progress(min(st.session_state.total_uploads / 100, 1.0))  # Progress out of 100
    st.write(f"Images collected: {st.session_state.total_uploads}")
    
    st.header("üèÜ Contribution Stats")
    st.markdown(f"""
    **Your contributions today:** {st.session_state.total_uploads}
    
    **Keep going!** Every image helps build better AI models for farmers.
    """)
    
    # Google Drive folder info
    st.header("üìÅ Google Drive Info")
    st.info("Images are uploaded to: **apple_dataset** folder")
    st.info("Each image has a paired metadata JSON file with assessment details.")