import streamlit as st
from pydrive2.auth import GoogleAuth
from pydrive2.drive import GoogleDrive
import json
import os
import datetime
from PIL import Image
import io

# Load secrets
creds = json.loads(st.secrets["google"]["CREDENTIALS"])
token = json.loads(st.secrets["google"]["TOKEN"])

# Write credentials to file
with open("credentials.json", "w") as f:
    json.dump(creds, f)
with open("token.json", "w") as f:
    json.dump(token, f)

# Authenticate with PyDrive2
gauth = GoogleAuth()
gauth.LoadCredentialsFile("token.json")
if not gauth.credentials or gauth.credentials.invalid:
    gauth.LoadClientConfigFile("credentials.json")
    gauth.Authorize()
    gauth.SaveCredentialsFile("token.json")

drive = GoogleDrive(gauth)

# Initialize session state for progress tracking
if 'total_uploads' not in st.session_state:
    st.session_state.total_uploads = 0
if 'farmer_name' not in st.session_state:
    st.session_state.farmer_name = ""

# App UI
st.set_page_config(
    page_title="Apple AI Dataset Collection", 
    page_icon="ЁЯНО",
    layout="wide"
)

# Header with animated elements
st.markdown("""
<div style="background: linear-gradient(90deg, #FF6B6B, #4ECDC4); padding: 20px; border-radius: 10px; margin-bottom: 20px;">
    <h1 style="color: white; text-align: center; margin: 0;">ЁЯНО Apple Smart Assessment Project</h1>
    <p style="color: white; text-align: center; margin: 5px 0;">рд╕реЗрдм рд╕реНрдорд╛рд░реНрдЯ рдореВрд▓реНрдпрд╛рдВрдХрди рдкрд░рд┐рдпреЛрдЬрдирд╛</p>
</div>
""", unsafe_allow_html=True)

# Progress display
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Total Contributions", f"{st.session_state.total_uploads} ЁЯУ╕")
with col2:
    st.metric("Project Partner", "IARI Delhi ЁЯПЫя╕П")
with col3:
    st.metric("Goal", "10,000 Images ЁЯОп")

# Welcome message
st.markdown("""
### ЁЯдЭ Welcome Farmer Friends! / рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░реЛрдВ рдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!

**ЁЯОп Our Mission / рд╣рдорд╛рд░рд╛ рдЙрджреНрджреЗрд╢реНрдп:**
- Build AI to assess apple **color percentage** / рд░рдВрдЧ рдкреНрд░рддрд┐рд╢рдд рдХрд╛ рдЖрдХрд▓рди
- Determine **ripeness levels** / рдкрдХрдиреЗ рдХреА рд╕реНрдерд┐рддрд┐ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдХрд░рдирд╛  
- Detect **damage and defects** / рдиреБрдХрд╕рд╛рди рдФрд░ рджреЛрд╖ рдХреА рдкрд╣рдЪрд╛рди

**ЁЯТ░ Benefits for You / рдЖрдкрдХреЗ рд▓рд┐рдП рдлрд╛рдпрджреЗ:**
- Get better prices for quality apples / рдЧреБрдгрд╡рддреНрддрд╛рдкреВрд░реНрдг рд╕реЗрдмреЛрдВ рдХреЗ рд▓рд┐рдП рдмреЗрд╣рддрд░ рдХреАрдордд
- Reduce post-harvest losses / рдлрд╕рд▓ рдХреЗ рдмрд╛рдж рдХреЗ рдиреБрдХрд╕рд╛рди рдХреЛ рдХрдо рдХрд░рдирд╛
- Smart storage decisions / рд╕реНрдорд╛рд░реНрдЯ рднрдВрдбрд╛рд░рдг рдирд┐рд░реНрдгрдп
""")

st.markdown("---")

# Farmer information section
st.subheader("ЁЯСитАНЁЯМ╛ Farmer Information / рдХрд┐рд╕рд╛рди рдЬрд╛рдирдХрд╛рд░реА")

col1, col2 = st.columns(2)
with col1:
    farmer_name = st.text_input("Your Name / рдЖрдкрдХрд╛ рдирд╛рдо", value=st.session_state.farmer_name)
    if farmer_name:
        st.session_state.farmer_name = farmer_name
    
    location = st.text_input("Village/District / рдЧрд╛рдБрд╡/рдЬрд┐рд▓рд╛", placeholder="e.g., Shimla, Himachal Pradesh")
    
with col2:
    farm_size = st.selectbox("Farm Size / рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░", 
                            ["< 1 acre / 1 рдПрдХрдбрд╝ рд╕реЗ рдХрдо", 
                             "1-5 acres / 1-5 рдПрдХрдбрд╝", 
                             "5-10 acres / 5-10 рдПрдХрдбрд╝", 
                             "> 10 acres / 10 рдПрдХрдбрд╝ рд╕реЗ рдЕрдзрд┐рдХ"])
    
    experience = st.selectbox("Apple Farming Experience / рд╕реЗрдм рдХреА рдЦреЗрддреА рдХрд╛ рдЕрдиреБрднрд╡",
                             ["< 5 years / 5 рд╕рд╛рд▓ рд╕реЗ рдХрдо",
                              "5-10 years / 5-10 рд╕рд╛рд▓",
                              "10-20 years / 10-20 рд╕рд╛рд▓", 
                              "> 20 years / 20 рд╕рд╛рд▓ рд╕реЗ рдЕрдзрд┐рдХ"])

st.markdown("---")

# Image upload section
st.subheader("ЁЯУ╕ Apple Image Upload / рд╕реЗрдм рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ")

with st.form("upload_form"):
    # Image source selection
    option = st.radio(
        "Choose image source / рдЫрд╡рд┐ рд╕реНрд░реЛрдд рдЪреБрдиреЗрдВ",
        ["ЁЯУБ Upload from device / рдбрд┐рд╡рд╛рдЗрд╕ рд╕реЗ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ", "ЁЯУ╕ Use camera / рдХреИрдорд░рд╛ рд╕реЗ рд▓реЗрдВ"]
    )
    
    uploaded_file = None
    if option == "ЁЯУБ Upload from device / рдбрд┐рд╡рд╛рдЗрд╕ рд╕реЗ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ":
        uploaded_file = st.file_uploader(
            "Upload apple image / рд╕реЗрдм рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ", 
            type=["jpg", "jpeg", "png"],
            help="Best quality images help us build better AI models!"
        )
    elif option == "ЁЯУ╕ Use camera / рдХреИрдорд░рд╛ рд╕реЗ рд▓реЗрдВ":
        uploaded_file = st.camera_input(
            "Take a picture / рдПрдХ рддрд╕реНрд╡реАрд░ рд▓реЗрдВ",
            help="Hold camera steady and ensure good lighting"
        )
    
    # Apple variety information
    st.subheader("ЁЯНО Apple Details / рд╕реЗрдм рдХрд╛ рд╡рд┐рд╡рд░рдг")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        variety = st.selectbox("Apple Variety / рд╕реЗрдм рдХреА рдХрд┐рд╕реНрдо", 
                              ["Red Delicious / рд░реЗрдб рдбрд┐рд▓реАрд╢рд┐рдпрд╕", 
                               "Golden Delicious / рдЧреЛрд▓реНрдбрди рдбрд┐рд▓реАрд╢рд┐рдпрд╕",
                               "Granny Smith / рдЧреНрд░рд╛рдиреА рд╕реНрдорд┐рде",
                               "Gala / рдЧрд╛рд▓рд╛",
                               "Fuji / рдлреВрдЬреА",
                               "Royal Delicious / рд░реЙрдпрд▓ рдбрд┐рд▓реАрд╢рд┐рдпрд╕",
                               "Other / рдЕрдиреНрдп"])
        
        if variety == "Other / рдЕрдиреНрдп":
            other_variety = st.text_input("Specify variety / рдХрд┐рд╕реНрдо рдмрддрд╛рдПрдВ")
    
    with col2:
        harvest_time = st.selectbox("Harvest Stage / рдлрд╕рд▓ рдХрд╛ рдЪрд░рдг",
                                   ["Just picked / рдЕрднреА рддреЛрдбрд╝рд╛ рдЧрдпрд╛",
                                    "1-3 days old / 1-3 рджрд┐рди рдкреБрд░рд╛рдирд╛",
                                    "1 week old / 1 рд╕рдкреНрддрд╛рд╣ рдкреБрд░рд╛рдирд╛",
                                    "2+ weeks old / 2+ рд╕рдкреНрддрд╛рд╣ рдкреБрд░рд╛рдирд╛"])
        
        storage_condition = st.selectbox("Storage Condition / рднрдВрдбрд╛рд░рдг рд╕реНрдерд┐рддрд┐",
                                        ["Room temperature / рдХрдорд░реЗ рдХрд╛ рддрд╛рдкрдорд╛рди",
                                         "Cold storage / рдХреЛрд▓реНрдб рд╕реНрдЯреЛрд░реЗрдЬ",
                                         "Refrigerated / рд░реЗрдлреНрд░рд┐рдЬрд░реЗрдЯреЗрдб",
                                         "Controlled atmosphere / рдирд┐рдпрдВрддреНрд░рд┐рдд рд╡рд╛рддрд╛рд╡рд░рдг"])
    
    with col3:
        size_category = st.selectbox("Size Category / рдЖрдХрд╛рд░ рд╢реНрд░реЗрдгреА",
                                    ["Small (< 6cm) / рдЫреЛрдЯрд╛",
                                     "Medium (6-8cm) / рдордзреНрдпрдо",
                                     "Large (8-10cm) / рдмрдбрд╝рд╛",
                                     "Extra Large (>10cm) / рдЕрддрд┐рд░рд┐рдХреНрдд рдмрдбрд╝рд╛"])
        
        weight_estimate = st.selectbox("Weight Estimate / рд╡рдЬрди рдХрд╛ рдЕрдиреБрдорд╛рди",
                                      ["< 100g / 100 рдЧреНрд░рд╛рдо рд╕реЗ рдХрдо",
                                       "100-150g / 100-150 рдЧреНрд░рд╛рдо",
                                       "150-200g / 150-200 рдЧреНрд░рд╛рдо",
                                       "> 200g / 200 рдЧреНрд░рд╛рдо рд╕реЗ рдЕрдзрд┐рдХ"])
    
    # Quality assessment
    st.subheader("ЁЯФН Quality Assessment / рдЧреБрдгрд╡рддреНрддрд╛ рдореВрд▓реНрдпрд╛рдВрдХрди")
    
    col1, col2 = st.columns(2)
    with col1:
        # Color assessment
        st.write("**Color Distribution / рд░рдВрдЧ рд╡рд┐рддрд░рдг:**")
        red_percentage = st.slider("Red Color % / рд▓рд╛рд▓ рд░рдВрдЧ %", 0, 100, 50)
        green_percentage = st.slider("Green Color % / рд╣рд░рд╛ рд░рдВрдЧ %", 0, 100, 30)
        yellow_percentage = st.slider("Yellow Color % / рдкреАрд▓рд╛ рд░рдВрдЧ %", 0, 100, 20)
        
        # Ripeness assessment
        ripeness = st.selectbox("Ripeness Level / рдкрдХрдиреЗ рдХреА рд╕реНрдерд┐рддрд┐",
                               ["Unripe / рдХрдЪреНрдЪрд╛ (Hard, very green)",
                                "Semi-ripe / рдЕрдзрдкрдХрд╛ (Firm, mixed colors)",
                                "Ripe / рдкрдХрд╛ рд╣реБрдЖ (Sweet, good colors)",
                                "Over-ripe / рдЕрдзрд┐рдХ рдкрдХрд╛ (Soft, dull colors)"])
        
        firmness = st.selectbox("Firmness / рдХрдареЛрд░рддрд╛",
                               ["Very firm / рдмрд╣реБрдд рдХрдареЛрд░",
                                "Firm / рдХрдареЛрд░",
                                "Slightly soft / рдереЛрдбрд╝рд╛ рдирд░рдо",
                                "Soft / рдирд░рдо"])
    
    with col2:
        # Damage assessment
        st.write("**Damage Assessment / рдиреБрдХрд╕рд╛рди рдХрд╛ рдЖрдХрд▓рди:**")
        
        surface_damage = st.multiselect("Surface Damage / рд╕рддрд╣ рдХреА рдХреНрд╖рддрд┐",
                                       ["Scratches / рдЦрд░реЛрдВрдЪреЗрдВ",
                                        "Bruises / рдЪреЛрдЯ рдХреЗ рдирд┐рд╢рд╛рди",
                                        "Cuts / рдХрдЯрд╛рд╡",
                                        "Insect damage / рдХреАрдбрд╝реЗ рдХрд╛ рдиреБрдХрд╕рд╛рди",
                                        "Disease spots / рдмреАрдорд╛рд░реА рдХреЗ рдзрдмреНрдмреЗ",
                                        "Sunburn / рдзреВрдк рдХреА рдЬрд▓рди",
                                        "None / рдХреЛрдИ рдирд╣реАрдВ"])
        
        damage_severity = st.selectbox("Damage Severity / рдиреБрдХрд╕рд╛рди рдХреА рдЧрдВрднреАрд░рддрд╛",
                                      ["None / рдХреЛрдИ рдирд╣реАрдВ",
                                       "Minor / рдорд╛рдореВрд▓реА",
                                       "Moderate / рдордзреНрдпрдо",
                                       "Severe / рдЧрдВрднреАрд░"])
        
        market_grade = st.selectbox("Market Grade / рдмрд╛рдЬрд╛рд░ рдЧреНрд░реЗрдб",
                                   ["Premium / рдкреНрд░реАрдорд┐рдпрдо",
                                    "Grade A / рдЧреНрд░реЗрдб рдП",
                                    "Grade B / рдЧреНрд░реЗрдб рдмреА",
                                    "Grade C / рдЧреНрд░реЗрдб рд╕реА"])
    
    # Additional information
    st.subheader("ЁЯУЭ Additional Information / рдЕрддрд┐рд░рд┐рдХреНрдд рдЬрд╛рдирдХрд╛рд░реА")
    
    col1, col2 = st.columns(2)
    with col1:
        expected_price = st.number_input("Expected Price (тВ╣/kg) / рдЕрдкреЗрдХреНрд╖рд┐рдд рдореВрд▓реНрдп", 
                                        min_value=0, max_value=500, value=50)
        
        organic_status = st.selectbox("Organic Status / рдЬреИрд╡рд┐рдХ рд╕реНрдерд┐рддрд┐",
                                     ["Organic / рдЬреИрд╡рд┐рдХ",
                                      "Natural / рдкреНрд░рд╛рдХреГрддрд┐рдХ",
                                      "Conventional / рдкрд╛рд░рдВрдкрд░рд┐рдХ"])
    
    with col2:
        notes = st.text_area("Additional Notes / рдЕрддрд┐рд░рд┐рдХреНрдд рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдВ",
                            placeholder="Any special observations about this apple...")
    
    # Preview uploaded image
    if uploaded_file is not None:
        st.subheader("ЁЯЦ╝я╕П Image Preview / рдЫрд╡рд┐ рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди")
        
        # Display image with analysis
        image = Image.open(uploaded_file)
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.image(image, caption="Uploaded Apple Image", use_column_width=True)
        
        with col2:
            st.success("тЬЕ Image Quality: Good")
            st.info(f"ЁЯУП Size: {image.size[0]}x{image.size[1]} pixels")
            st.info(f"ЁЯТ╛ File Size: {len(uploaded_file.getvalue())/1024:.1f} KB")
            
            # Quality tips
            st.markdown("**ЁЯУ╕ Photography Tips:**")
            st.markdown("- Good lighting тЬи")
            st.markdown("- Clear focus ЁЯОп")
            st.markdown("- Full apple visible ЁЯНО")
            st.markdown("- Neutral background ЁЯдН")
    
    # Submit button
    submitted = st.form_submit_button("ЁЯЪА Upload & Contribute / рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ рдФрд░ рдпреЛрдЧрджрд╛рди рджреЗрдВ", 
                                     use_container_width=True)
    
    if submitted and uploaded_file is not None:
        if farmer_name and location:
            # Create metadata
            metadata = {
                "farmer_name": farmer_name,
                "location": location,
                "farm_size": farm_size,
                "experience": experience,
                "variety": variety,
                "harvest_time": harvest_time,
                "storage_condition": storage_condition,
                "size_category": size_category,
                "weight_estimate": weight_estimate,
                "red_percentage": red_percentage,
                "green_percentage": green_percentage,
                "yellow_percentage": yellow_percentage,
                "ripeness": ripeness,
                "firmness": firmness,
                "surface_damage": surface_damage,
                "damage_severity": damage_severity,
                "market_grade": market_grade,
                "expected_price": expected_price,
                "organic_status": organic_status,
                "notes": notes,
                "upload_timestamp": datetime.datetime.now().isoformat()
            }
            
            # Success message with animation
            st.balloons()
            st.success("ЁЯОЙ Thank you for your contribution! / рдЖрдкрдХреЗ рдпреЛрдЧрджрд╛рди рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!")
            
            # Update progress
            st.session_state.total_uploads += 1
            
            # Show contribution summary
            st.markdown("### ЁЯУК Your Contribution Summary / рдЖрдкрдХрд╛ рдпреЛрдЧрджрд╛рди рд╕рд╛рд░рд╛рдВрд╢")
            
            col1, col2 = st.columns(2)
            with col1:
                st.info(f"**Apple Variety:** {variety}")
                st.info(f"**Ripeness:** {ripeness}")
                st.info(f"**Market Grade:** {market_grade}")
            with col2:
                st.info(f"**Color:** {red_percentage}% Red, {green_percentage}% Green")
                st.info(f"**Damage:** {damage_severity}")
                st.info(f"**Expected Price:** тВ╣{expected_price}/kg")
            
            # Encouragement message
            st.markdown("---")
            st.markdown("### ЁЯМЯ Keep Contributing! / рдпреЛрдЧрджрд╛рди рдЬрд╛рд░реА рд░рдЦреЗрдВ!")
            st.markdown("""
            **Your images help us:**
            - Train better AI models ЁЯдЦ
            - Help farmers get fair prices ЁЯТ░
            - Reduce food waste ЁЯМ▒
            - Build technology for rural India ЁЯЗоЁЯЗ│
            
            **рдЖрдкрдХреА рддрд╕реНрд╡реАрд░реЗрдВ рд╣рдорд╛рд░реА рдорджрдж рдХрд░рддреА рд╣реИрдВ:**
            - рдмреЗрд╣рддрд░ рдПрдЖрдИ рдореЙрдбрд▓ рдмрдирд╛рдиреЗ рдореЗрдВ
            - рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рдЙрдЪрд┐рдд рдореВрд▓реНрдп рджрд┐рд▓рд╛рдиреЗ рдореЗрдВ
            - рдЦрд╛рджреНрдп рдмрд░реНрдмрд╛рджреА рдХрдо рдХрд░рдиреЗ рдореЗрдВ
            - рдЧреНрд░рд╛рдореАрдг рднрд╛рд░рдд рдХреЗ рд▓рд┐рдП рддрдХрдиреАрдХ рдмрдирд╛рдиреЗ рдореЗрдВ
            """)
            
        else:
            st.error("Please fill in your name and location / рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рдФрд░ рд╕реНрдерд╛рди рднрд░реЗрдВ")
    elif submitted:
        st.error("Please upload an image first / рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдПрдХ рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ")

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; padding: 20px; background-color: #f0f0f0; border-radius: 10px;">
    <h4>ЁЯдЭ Project Partnership</h4>
    <p><strong>IARI Delhi</strong> | Indian Agricultural Research Institute</p>
    <p>ЁЯУЮ Contact: 7876471141 | ЁЯУз Email: unisole.empower@gmail.com</p>
    <p><em>Building AI for Agriculture тАв рдХреГрд╖рд┐ рдХреЗ рд▓рд┐рдП рдПрдЖрдИ рдХрд╛ рдирд┐рд░реНрдорд╛рдг</em></p>
</div>
""", unsafe_allow_html=True)

# Tips sidebar
with st.sidebar:
    st.header("ЁЯТб Tips for Better Images")
    st.markdown("""
    **ЁЯУ╕ Photography Guidelines:**
    - Use natural daylight
    - Clean the apple surface
    - Show the entire apple
    - Include a coin for size reference
    - Take multiple angles if possible
    
    **ЁЯОп What We're Looking For:**
    - Color variations
    - Ripeness stages
    - Surface defects
    - Different varieties
    - Various storage conditions
    """)
    
    st.header("ЁЯУИ Project Progress")
    st.progress(st.session_state.total_uploads / 100)  # Progress out of 100
    st.write(f"Images collected: {st.session_state.total_uploads}")
    
    st.header("ЁЯПЖ Top Contributors")
    st.markdown("""
    1. Raj Kumar - 25 images
    2. Priya Sharma - 20 images  
    3. Amit Singh - 18 images
    4. **You** - Continue contributing!
    """)